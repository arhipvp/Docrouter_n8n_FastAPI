{
  "name": "My workflow 3",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -832,
        16
      ],
      "id": "2026d1e1-7906-4ddb-9b01-4f301414bb7d",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "fileSelector": "C:/Data/inbox/*.pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -624,
        16
      ],
      "id": "36ccd47e-e9c5-4306-8b30-e738ebe56739",
      "name": "Read/Write Files from Disk",
      "alwaysOutputData": false,
      "executeOnce": false
    },
    {
      "parameters": {
        "options": {
          "reset": false,
          "batchSize": 1
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -416,
        16
      ],
      "id": "bd4ac4c6-2b6f-4eb0-a9b9-5bc9e40841f9",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "jsCode": "const binKey = Object.keys(items[0].binary || {})[0] || 'data';\nreturn items.map(item => {\n  const f = item.binary[binKey];\n  item.json.inbox_name = f.fileName;                            // e.g. \"Residence permit Natalia BO card.pdf\"\n  item.json.inbox_path = `C:\\\\Data\\\\inbox\\\\${f.fileName}`;       // полный путь (Windows)\n  return item;\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -208,
        -80
      ],
      "id": "6eaac815-48a2-41a9-bfec-c5c384ee34d7",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8081/lang",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "={{$json.text}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        208,
        -80
      ],
      "id": "e3c2485f-8a1f-4ad0-9063-b82e28c3cab5",
      "name": "Lang"
    },
    {
      "parameters": {
        "jsCode": "const textData = $('Text').item.json;\nconst langData = $('Lang').item.json;\nconst fileData = $('Code in JavaScript').item.json;\nconst normalize = value => (value ?? '').toString();\nconst fullText = normalize(textData.text);\nconst trimmed = fullText.trim();\nconst limit = 15000;\nconst truncatedText = trimmed.length > limit ? trimmed.slice(0, limit) : trimmed;\nconst truncated = trimmed.length > limit;\nconst summarize = (input, size = 400) => {\n  const compact = (input || '').replace(/\\s+/g, ' ').trim();\n  if (!compact) return '';\n  if (compact.length <= size) return compact;\n  const slice = compact.slice(0, size);\n  const cut = slice.lastIndexOf(' ');\n  return (cut > 120 ? slice.slice(0, cut) : slice).trim() + '…';\n};\nconst summaryForLang = (langCode) => {\n  if (langData.detected_lang === langCode) {\n    return summarize(truncatedText, 400);\n  }\n  const placeholders = {\n    ru: 'Краткое описание на русском получено автоматически (заглушка).',\n    de: 'Kurzzusammenfassung auf Deutsch automatisch erzeugt (Platzhalter).'\n  };\n  const base = summarize(truncatedText, 400);\n  return `${placeholders[langCode] || 'Summary placeholder.'}${base ? `\\n\\n${base}` : ''}`;\n};\nconst buildContent = (langCode) => {\n  const isOriginal = langData.detected_lang === langCode;\n  if (isOriginal) {\n    return { text: truncatedText, source: 'original' };\n  }\n  const placeholders = {\n    ru: 'Автоматический перевод недоступен. Заглушка.',\n    de: 'Automatische Übersetzung nicht verfügbar. Platzhalter.'\n  };\n  const preface = placeholders[langCode] || 'Translation placeholder.';\n  return { text: `${preface}\\n\\n${truncatedText}`, source: 'machine_translation_placeholder' };\n};\nreturn items.map(item => {\n  item.json.sidecar_metadata = {\n    inbox: { name: fileData.inbox_name, path: fileData.inbox_path },\n    extract: {\n      pages: textData.pages,\n      size_bytes: textData.size_bytes,\n      has_text_layer: textData.has_text_layer,\n      used_ocr: textData.used_ocr\n    },\n    language: { detected: langData.detected_lang, probability: langData.prob }\n  };\n  item.json.sidecar_summaries = {\n    ru: summaryForLang('ru'),\n    de: summaryForLang('de')\n  };\n  item.json.sidecar_content = {\n    ru: buildContent('ru'),\n    de: buildContent('de')\n  };\n  item.json.sidecar_content_truncated = truncated;\n  item.json.sidecar_source_text = truncatedText;\n  return item;\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        208,
        112
      ],
      "id": "9e3f0b10-8d33-4a6c-9b70-c6d2babc7aa1",
      "name": "Подготовка сайдкаров"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8081/extract-text-by-path",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "file_path",
              "value": "={{$json.inbox_path}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        0,
        -80
      ],
      "id": "5a84e39e-b66d-460e-97bf-30c22bd363f0",
      "name": "Text"
    },
    {
      "parameters": {
        "method": "GET",
        "url": "http://127.0.0.1:8081/folder-endpoints",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        416,
        -80
      ],
      "id": "5a63a32c-0c07-4deb-8e8a-1a2a30bcad8d",
      "name": "Folder Endpoints"
    },
    {
      "parameters": {
        "method": "GET",
        "url": "http://127.0.0.1:8081/list-archive-tree",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        416,
        32
      ],
      "id": "b4cf89af-d650-47fa-b891-17453e68dcc8",
      "name": "List Archive Tree"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Ты маршрутизатор документов. Используй FOLDER_ENDPOINTS (плоский список конечных папок) и ARCHIVE_TREE (полная вложенная структура) для принятия решения.\nFOLDER_ENDPOINTS:\n{{ JSON.stringify($('Folder Endpoints').item.json.folder_endpoints, null, 2) }}\nARCHIVE_TREE:\n{{ JSON.stringify($('List Archive Tree').item.json.tree, null, 2) }}\nTEXT:\n---\n{{ $('Text').item.json.text }}\n---\nМета:\n- Страницы: {{ $('Text').item.json.pages }}\n- Язык: {{ $('Lang').item.json.detected_lang }} (prob={{ $('Lang').item.json.prob }})\n\nОТВЕТ:\nВерни строго JSON без пояснений и лишних полей:\n{\"matched\":bool,\"selected_path\":string|null,\"confidence\":0..1,\"reason\":string,\"needs_new_folder\":bool,\"suggested_path\":string|null}\nselected_path и suggested_path — относительные пути без ведущего слэша, разделитель '/'.\nЕсли matched=false, обязательно needs_new_folder=true и предложи осмысленный suggested_path.\nЕсли matched=true, needs_new_folder=false и укажи selected_path.\n",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        624,
        -80
      ],
      "id": "2b0601d4-f554-44f3-b304-ddfac9095453",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": "openai/gpt-4o",
        "options": {
          "responseFormat": "json_object"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        528,
        176
      ],
      "id": "7541278a-8ce7-4eb5-88c7-fab439137422",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "VddzAlbgBaLnDjLZ",
          "name": "OpenRouter account"
        }
      },
      "notes": "Ты маршрутизатор документов. У тебя есть полное дерево папок (вложенная структура). По TEXT выбери лучшее место в дереве (конечную папку любого уровня) ИЛИ предложи новый путь. Верни СТРОГО JSON: {\\\"matched\\\":bool,\\\"selected_path\\\":string|null,\\\"confidence\\\":0..1,\\\"reason\\\":string,\\\"needs_new_folder\\\":bool,\\\"suggested_path\\\":string|null}. selected_path и suggested_path должны быть относительными путями с '/' как в дереве. Если подходящей папки нет — matched=false, needs_new_folder=true и предложи suggested_path (полный путь category/subcategory/issuer/person если можешь; но допускается и иной глубины, если логично). Никакого текста вне JSON."
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"matched\": {\n      \"type\": \"boolean\"\n    },\n    \"selected_path\": {\n      \"type\": [\n        \"string\",\n        \"null\"\n      ]\n    },\n    \"confidence\": {\n      \"type\": \"number\",\n      \"minimum\": 0,\n      \"maximum\": 1\n    },\n    \"reason\": {\n      \"type\": \"string\"\n    },\n    \"needs_new_folder\": {\n      \"type\": \"boolean\"\n    },\n    \"suggested_path\": {\n      \"type\": [\n        \"string\",\n        \"null\"\n      ]\n    }\n  },\n  \"required\": [\n    \"matched\",\n    \"selected_path\",\n    \"confidence\",\n    \"reason\",\n    \"needs_new_folder\",\n    \"suggested_path\"\n  ],\n  \"additionalProperties\": false\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        752,
        160
      ],
      "id": "b8359076-0f27-4c68-9571-b6b8d5f13837",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "168b5f0e-f8d1-4d49-ad7f-94e532d87b2f",
              "leftValue": "={{ $json.output.needs_new_folder }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        944,
        -96
      ],
      "id": "cc0a93c7-e6ac-403e-a452-6cfcbacc406b",
      "name": "If"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8081/fs-move",
        "sendBody": true,
        "jsonParameters": true,
        "bodyParametersJson": "={{ {\\n  src_path: $('Code in JavaScript').item.json.inbox_path,\\n  dest_dir: $json.dest_dir || ('C:/Data/archive/' + (($('AI Agent').item.json.output.selected_path || $('AI Agent').item.json.output.suggested_path || '').replace(/^=+/, '').trim())),\\n  dest_name: $('Code in JavaScript').item.json.inbox_name,\\n  metadata: $('Подготовка сайдкаров').item.json.sidecar_metadata,\\n  summaries: $('Подготовка сайдкаров').item.json.sidecar_summaries,\\n  content: $('Подготовка сайдкаров').item.json.sidecar_content,\\n  content_truncated: $('Подготовка сайдкаров').item.json.sidecar_content_truncated,\\n  source_text: $('Подготовка сайдкаров').item.json.sidecar_source_text\\n} }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1648,
        128
      ],
      "id": "63cfff58-e416-4d0b-bbf0-953a872dcf53",
      "name": "Перемещаем файл при готовой папке"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://127.0.0.1:8081/fs-mkdir",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "rel_path",
              "value": "={{ ($('AI Agent').item.json.output.suggested_path || '').replace(/^=+/, '').trim() }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1184,
        -112
      ],
      "id": "fe730eea-a02e-4272-8cd4-a9a74fb1db47",
      "name": "Делаем новую папку"
    },
    {
      "parameters": {
        "model": "openai/gpt-4o",
        "options": {
          "responseFormat": "json_object"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        528,
        432
      ],
      "id": "a200cf76-61dc-471a-b8f8-e8b86561e387",
      "name": "OpenRouter Chat Model (Texts)",
      "credentials": {
        "openRouterApi": {
          "id": "VddzAlbgBaLnDjLZ",
          "name": "OpenRouter account"
        }
      },
      "notes": "Генерирует summary и полный текст (RU/DE) по PDF контенту."
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\"type\": \"object\", \"properties\": {\"summaries\": {\"type\": \"object\", \"properties\": {\"ru\": {\"type\": \"string\"}, \"de\": {\"type\": \"string\"}}, \"required\": [\"ru\", \"de\"], \"additionalProperties\": false}, \"content\": {\"type\": \"object\", \"properties\": {\"ru\": {\"type\": \"object\", \"properties\": {\"text\": {\"type\": \"string\"}, \"source\": {\"type\": \"string\", \"enum\": [\"original\", \"machine_translation\"]}}, \"required\": [\"text\", \"source\"], \"additionalProperties\": true}, \"de\": {\"type\": \"object\", \"properties\": {\"text\": {\"type\": \"string\"}, \"source\": {\"type\": \"string\", \"enum\": [\"original\", \"machine_translation\"]}}, \"required\": [\"text\", \"source\"], \"additionalProperties\": true}, \"truncated\": {\"type\": \"boolean\"}}, \"required\": [\"ru\", \"de\"], \"additionalProperties\": false}}, \"required\": [\"summaries\", \"content\"], \"additionalProperties\": false}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        752,
        416
      ],
      "id": "1e671869-a2d4-4adb-81a4-bd25b5e3d0d1",
      "name": "Texts Output Parser"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Ты готовишь описания и контент PDF.\nDETECTED_LANG={{ $('Lang').item.json.detected_lang }} (prob={{ $('Lang').item.json.prob }})\nTEXT:\n---\n{{ $('Text').item.json.text }}\n---\n\nВерни строго JSON без пояснений:\n{\n  \"summaries\": {\"ru\": string, \"de\": string},\n  \"content\": {\n    \"ru\": {\"text\": string, \"source\": \"original\"|\"machine_translation\"},\n    \"de\": {\"text\": string, \"source\": \"original\"|\"machine_translation\"},\n    \"truncated\": bool\n  }\n}\nЕсли исходный язык совпадает с ru или de, используй source=\"original\" и полный текст без перевода для языка-оригинала, другой язык переведи. Если нужно укоротить текст — поставь truncated=true.\n",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        624,
        320
      ],
      "id": "d8d42022-ce08-4f53-bfda-a7f28f03f436",
      "name": "Texts Agent"
    },
    {
      "parameters": {
        "jsCode": "const ARCHIVE_ROOT = 'C:/Data/archive';\nreturn items.map(item => {\n  const inbox = $('Code in JavaScript').item.json || {};\n  const textInfo = $('Text').item.json || {};\n  const langInfo = $('Lang').item.json || {};\n  const routing = ($('AI Agent').item.json || {}).output || {};\n  const textsOutput = ($('Texts Agent').item.json || {}).output || {};\n\n  const cleanedPath = (routing.selected_path || routing.suggested_path || '').replace(/^=+/, '').trim();\n  const resolvedDir = item.json.dest_dir || (cleanedPath ? `${ARCHIVE_ROOT}/${cleanedPath}` : null);\n  if (!resolvedDir) {\n    throw new Error('Не удалось определить конечную папку архива (dest_dir).');\n  }\n  item.json.dest_dir = resolvedDir;\n\n  const destName = $('Code in JavaScript').item.json?.inbox_name || item.json.dest_name || inbox.inbox_name || 'document.pdf';\n  item.json.dest_name = destName;\n\n  const metadata = {\n    inbox_name: destName,\n    original_inbox_path: inbox.inbox_path,\n    generated_at: new Date().toISOString(),\n    archive: {\n      dest_dir: resolvedDir,\n      dest_name: destName,\n      rel_path: cleanedPath || null\n    },\n    file: {\n      pages: textInfo.pages,\n      size_bytes: textInfo.size_bytes,\n      has_text_layer: textInfo.has_text_layer,\n      used_ocr: textInfo.used_ocr\n    },\n    lang: langInfo,\n    routing: routing\n  };\n\n  if (textsOutput.summaries) {\n    metadata.summaries = textsOutput.summaries;\n  }\n  if (textsOutput.content && Object.prototype.hasOwnProperty.call(textsOutput.content, 'truncated')) {\n    metadata.content_truncated = textsOutput.content.truncated;\n  }\n\n  const preparedContent = {};\n  const contentMeta = {};\n  if (textsOutput.content && typeof textsOutput.content === 'object') {\n    if (textsOutput.content.ru !== undefined) {\n      if (textsOutput.content.ru && typeof textsOutput.content.ru === 'object') {\n        const { text = '', ...rest } = textsOutput.content.ru;\n        preparedContent.ru = { text: text || '', ...rest };\n        if (Object.keys(rest).length) {\n          contentMeta.ru = rest;\n        }\n      } else if (typeof textsOutput.content.ru === 'string') {\n        preparedContent.ru = { text: textsOutput.content.ru };\n      }\n    }\n    if (textsOutput.content.de !== undefined) {\n      if (textsOutput.content.de && typeof textsOutput.content.de === 'object') {\n        const { text = '', ...rest } = textsOutput.content.de;\n        preparedContent.de = { text: text || '', ...rest };\n        if (Object.keys(rest).length) {\n          contentMeta.de = rest;\n        }\n      } else if (typeof textsOutput.content.de === 'string') {\n        preparedContent.de = { text: textsOutput.content.de };\n      }\n    }\n    if (Object.prototype.hasOwnProperty.call(textsOutput.content, 'truncated')) {\n      preparedContent.truncated = textsOutput.content.truncated;\n    }\n  }\n\n  if (Object.keys(contentMeta).length) {\n    metadata.content_meta = contentMeta;\n  }\n\n  item.json.metadata = metadata;\n  item.json.sidecar_content = Object.keys(preparedContent).length ? preparedContent : {};\n  return item;\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1392,
        128
      ],
      "id": "7dd35728-68f7-4718-bade-70f3c33d16ad",
      "name": "Собираем метаданные"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text": {
      "main": [
        [
          {
            "node": "Lang",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lang": {
      "main": [
        [
          {
            "node": "Folder Endpoints",
            "type": "main",
            "index": 0
          },
          {
            "node": "List Archive Tree",
            "type": "main",
            "index": 0
          },
          {
            "node": "Подготовка сайдкаров",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Texts Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Делаем новую папку",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Собираем метаданные",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Делаем новую папку": {
      "main": [
        [
          {
            "node": "Собираем метаданные",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Folder Endpoints": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Archive Tree": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Перемещаем файл при готовой папке": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model (Texts)": {
      "ai_languageModel": [
        [
          {
            "node": "Texts Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Texts Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Texts Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Texts Agent": {},
    "Собираем метаданные": {
      "main": [
        [
          {
            "node": "Перемещаем файл при готовой папке",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "47442540-50fe-4079-a8de-800152f5bfc4",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b6cd106bc0d1d0ce53ba15fc43af31fb4b6982dafc498abdbf7532e923e9d8e3"
  },
  "id": "4Mw6c8EYEJXVuJLv",
  "tags": []
}